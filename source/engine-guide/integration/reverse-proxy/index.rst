.. _reverse-proxy:

Reverse Proxy
=============

The purpose of a reverse proxy (or frontend web server) is to provide a single
point of entry for one or more services from outside the network. The reverse
proxy receives all requests from the clients and forwards them to the Axon Ivy
Engine which handles them. This allows integrating the processes and
applications that you are running on an |ivy-engine| into a company or web
portal. The use of a reverse proxy provides higher security. You have to keep
the reverse proxy up-to-date at any time with the latest security updates
because this is also the entry point for attackers. In addition, we recommend
that you block access to critical resources such as the Engine Cockpit.

We strongly recommend running a productive |ivy-engine| behind a reverse
proxy. You should :ref:`terminate the SSL traffic (HTTPS) <reverse-proxy-terminate-ssl>`
on the reverse proxy and let the reverse proxy communicate with the |ivy-engine|
via plain HTTP.

|

.. graphviz:: overview.dot

|

We have described how to integrate the Axon Ivy Engine with the following
reverse proxy servers:

.. toctree::
    :maxdepth: 1

    nginx/index
    apache-httpd/index
    microsoft-iis/index

Read carefully how to improve security by :ref:`restricting the access
<reverse-proxy-secure>` to an Axon Ivy Engine when using a reverse proxy. Some
reverse proxy servers provide :ref:`Single Sign-on (SSO) <single-sign-on>`
functionality. The reverse proxy then is responsible to authenticate users.

The Engine Cockpit provides the :ref:`web server view <engine-cockpit-web-server>`
for debugging purposes while integrating a reverse proxy. 

|


.. rubric:: Base URL

Besides the setup of the reverse proxy itself, you always need to configure the
base URL in :ref:`ivy.yaml <ivy-yaml>`. The Axon Ivy Engine will use this
configuration to create absolute links that are accessible to clients (e.g., for
links in mails).

   .. code:: yaml

      # sample ivy.yaml that configures the base URL for clients.
      # https://acme.com will be the absolute URL prefix for links generated by Axon Ivy Engine.
      BaseUrl: https://acme.com


.. rubric:: HTTP Headers

To successfully integrate a reverse proxy with the |ivy-engine| you need to pass the host
which the client itself initally has requested, so that the |ivy-engine| can
generate correct URLs based on the request. All documented examples
preserve this :code:`Host` header, but if you integrate the |ivy-engine| with any other
reverse proxy you need to pass the :code:`Host` header to the |ivy-engine|. As an alternative
you can provide :code:`X-Forwarded-Host` for identifying the original host requested by the client. 

Check out also the following headers in the example which need to be set correctly:

- :code:`X-Forwarded-For`
  for identifying the originating IP address of a
  client connecting to the reverse proxy server. It should not affect
  functionality, but you may be glad to have the correct IP address of your
  client in the logs.
- :code:`X-Forwarded-Proto`
  for identifying the protocol (HTTP or HTTPS) that
  a client used to connect to your reverse proxy server. This is important
  otherwise the generated links or redirects are wrong. Mostly only needed to
  terminate SSL on the reverse proxy server.
- :code:`X-Forwarded-Port`
  for identifying the port that a client used to connect your reverse proxy server.
  This is only in charge if :code:`X-Forwarded-Proto` is set and only needed if you
  don't serve your site via non-standard ports (80 and 443).

You can change the name of the :code:`X-Forwarded` headers in the :ref:`ivy-yaml`
, see section :code:`ReverseProxy`.

.. toctree::
    :maxdepth: 1
    :hidden:

    secure-setup/index
